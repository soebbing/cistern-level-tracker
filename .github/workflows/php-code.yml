name: 'Code analysis & Container build'

on:
  push:

env:
  IMAGE_NAME: app

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: symfonycorp/security-checker-action@v3

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-node-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Lint Yaml files
        run: bin/console --env=dev lint:yaml src

      - name: Lint Twig templates
        run: bin/console --env=dev lint:twig src templates

      - name: Lint PHP files
        run: vendor/bin/parallel-lint src

      - name: Verifying no `var_dumps` exist
        run: vendor/bin/var-dump-check --symfony --doctrine src

      - name: Check Codestyle
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Sniffing Code
        run: vendor/bin/phpcbf src --extensions=module/php

      - name: Static code analysis
        run: vendor/bin/phpstan analyse src

  test:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo apt install php-sqlite3

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run unit tests
        run: .github/integration-tests

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: Coverage Report
          path: var/coverage/

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - uses: actions/checkout@v2
  #
  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file dev-ops/Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
